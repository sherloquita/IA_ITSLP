# -*- coding: utf-8 -*-
"""Práctica 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b5mScQd1MbNQQHgG45cVXs6L7OGGkCUV

# Prueba de funcionamiento
"""

def suma (a,b):
  resultado=a * b
  return resultado

print(suma(2,3))

"""#Práctica 1 - Parte 1: C a F"""

import tensorflow as tf
import numpy as np

celcius = np.array([-15, -5, 0, 5, 15], dtype=float)
fahrenheit = np.array([5, 23, 32, 41, 59], dtype=float)

#capa = tf.keras.layers.Dense(units=1, input_shape=[1])
#modelo = tf.keras.Sequential([capa])
oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])
oculta2 = tf.keras.layers.Dense(units=3)
salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1, oculta2, salida])

modelo.compile(
    optimizer = tf.keras.optimizers.Adam(0.1),
    loss='mean_squared_error'
)

print("Comenzando entrenamiento...")
historial=modelo.fit(celcius, fahrenheit, epochs=1000, verbose=False)
print("Modelo entrenado!!!")

import matplotlib.pyplot as plt
plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history["loss"])

print("Realizar una predicción")
resultado = modelo.predict([100.0])
print("El resultado es " + str(resultado) + " grados fahrenheit")

modelo.save('celsius_a_fahrenheit.h5')

!ls

!pip install tensorflowjs

!mkdir temperatura

!tensorflowjs_converter --input_format keras celsius_a_fahrenheit.h5 temperatura

!ls temperatura

"""# Variante del código"""

dolar = np.array([1, 2, 3, 4, 5], dtype=float)
peso = np.array([17.34, 34.68, 52.02, 69.36, 86.7], dtype=float)

#capa = tf.keras.layers.Dense(units=1, input_shape=[1])
#modelo = tf.keras.Sequential([capa])
oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])
oculta2 = tf.keras.layers.Dense(units=3)
salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1, oculta2, salida])

modelo.compile(
    optimizer = tf.keras.optimizers.Adam(0.1),
    loss='mean_squared_error'
)

print("Comenzando entrenamiento...")
historial=modelo.fit(dolar, peso, epochs=1000, verbose=False)
print("Modelo entrenado, ¡¡¡OMG!!!")

import matplotlib.pyplot as plt
plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history["loss"])

print("Realizar una predicción")
resultado = modelo.predict([10.0])
print("Te sale en " + str(resultado) + " pesos mxn")

